import csv, subprocess, os

def ensure_data_directory_exists():
    directory = "/mnt/data"
    if not os.path.exists(directory):
        os.makedirs(directory)
    return directory

def is_monitor_mode_enabled(interface):
    try:
        result = subprocess.run(['iwconfig', interface], stdout=subprocess.PIPE, stderr=subprocess.DEVNULL,
                                text=True)
        output = result.stdout
        return "Mode:Monitor" in output
    except Exception as e:
        print(f"An error occurred while checking monitoring mode: {e}")
        return False

def enable_monitor_mode(interface):
    try:
        print(f"Enabling monitoring mode on {interface}...")
        result = subprocess.run(['airmon-ng', 'start', interface], stdout=subprocess.PIPE, stderr=subprocess.PIPE,
                                text=True)
        if is_monitor_mode_enabled(interface + 'mon'):
            print(f"Monitoring mode enabled on {interface}mon")
            return True
        else:
            print("Failed to enable monitoring mode.")
            return False
    except Exception as e:
        print(f"An error occurred while enabling monitoring mode: {e}")
        return False

def run_airodump(interface):
    try:
        file_prefix = ensure_data_directory_exists() + "/airodump"
        airodump_process = subprocess.Popen(
            ['airodump-ng', '--write', file_prefix, '--output-format', 'csv', interface],
            stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        print("Airodump-ng is running... Press Ctrl+C to stop.")
        try:
            airodump_process.wait()
        except KeyboardInterrupt:
            airodump_process.terminate()
            print("\nAirodump-ng stopped by user.")
        airodump_process.communicate()

        directory = ensure_data_directory_exists()
        csv_file = None
        for file in os.listdir(directory):
            if file.startswith("airodump") and file.endswith('.csv'):
                csv_file = directory + '/' + file
                break

        if csv_file is None:
            print("No CSV file generated by airodump-ng.")
            return

        # Initialize a file to write all access points
        all_aps_filename = directory + '/access_points.txt'
        with open(all_aps_filename, 'w') as aps_file:
            # Extract BSSID, ENC, and SSID and write to the single file
            with open(csv_file, mode='r') as file:
                csv_reader = csv.reader(file)
                next(csv_reader)  # Skip the initial header row from the source CSV if it exists
                for row in csv_reader:
                    if len(row) >= 14:  # Ensure the row has enough columns
                        bssid = row[0].strip()
                        enc = row[5].strip()
                        ssid = row[13].strip()
                        if bssid and enc and ssid:  # Check for non-empty values
                            aps_file.write(f"{bssid}, {enc}, {ssid}\n")
            print(f"Extraction complete, all access points saved to {all_aps_filename}")
    except Exception as e:
        print(f"An error occurred: {e}")

def ask_for_scan(interface):
    response = input("Would you like to perform a scan with airodump-ng? (yes/no): ")
    if response.lower() == 'yes':
        run_airodump(interface)
    else:
        print("Exiting without scanning.")

def main():
    interface = 'wlan0'
    mon_interface = 'wlan0mon'

    # Check if wlan0mon is already in monitoring mode
    if is_monitor_mode_enabled(mon_interface):
        print(f"Monitoring mode is already enabled on: {mon_interface}")
        ask_for_scan(mon_interface)
    else:
        print("No network adapter is in monitoring mode.")
        user_input = input("Would you like to enable monitoring mode on wlan0? (yes/no): ")
        if user_input.lower() == 'yes':
            if enable_monitor_mode(interface):
                ask_for_scan(mon_interface)
        else:
            print("Exiting without enabling monitoring mode or scanning.")
